[build-system]
# build the package with [flit](https://flit.readthedocs.io)
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
# See https://www.python.org/dev/peps/pep-0621/
name = "aiida-vasp"
dynamic = ["version"]  # read from aiida_vasp/__init__.py
description = "AiiDA plugin for running VASPcalculations."
authors = [{name = "Espen Flage-Larsen", email = "espen.flage-larsen@sintef.no"}]
readme = "README.rst"
license = {file = "LICENSE.txt"}
classifiers = [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Framework :: AiiDA",
    "Development Status :: 5 - Production/Stable",
	"Environment :: Plugins",
	"Intended Audience :: Science/Research",
	"License :: OSI Approved :: MIT License",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Topic :: Scientific/Engineering :: Physics",
	"Topic :: Scientific/Engineering :: Chemistry",
	"Framework :: AiiDA"
]
keywords = ["aiida", "plugin"]
requires-python = ">=3.8"
dependencies = [
	"aiida-core[atomic_tools]>=2.0.1,<3",
	"pymatgen>=2019.7.2,<=2022.02.03,!=2019.9.7",
	"lxml",
	"packaging",
	"parsevasp~=3.0"
]

[project.urls]
Source = "https://github.com/zhubonan/aiida-grouppathx"

[project.optional-dependencies]
tests = [

    "aiida-core[tests]>=2.0.1,<3",
    "tox>=3.23.0",
    "virtualenv>20"
]

pre-commit = [
    "aiida-core[pre-commit]>=2.0.1,<3",
    "tox>=3.23.0",
    "virtualenv>20"
]
graphs = [
    "matplotlib"
]

[project.entry-points."aiida.cmdline.data"]
"vasp-potcar" = "aiida_vasp.commands.potcar:potcar"

[project.entry-points."aiida.calculations"]
"vasp.vasp" = "aiida_vasp.calcs.vasp:VaspCalculation"
"vasp.neb" = "aiida_vasp.calcs.neb:VaspNEBCalculation"
"vasp.vasp2w90" = "aiida_vasp.calcs.vasp2w90:Vasp2w90Calculation"
"vasp.immigrant" = "aiida_vasp.calcs.immigrant:VaspImmigrant"

[project.entry-points."aiida.data"]
"vasp.archive" = "aiida_vasp.data.archive:ArchiveData"
"vasp.chargedensity" = "aiida_vasp.data.chargedensity:ChargedensityData"
"vasp.wavefun" = "aiida_vasp.data.wavefun:WavefunData"
"vasp.potcar" = "aiida_vasp.data.potcar:PotcarData"
"vasp.potcar_file" = "aiida_vasp.data.potcar:PotcarFileData"

[project.entry-points."aiida.parsers"]
"vasp.vasp" = "aiida_vasp.parsers.vasp:VaspParser"
"vasp.neb" = "aiida_vasp.parsers.neb:VtstNebParser"
"vasp.vasp2w90" = "aiida_vasp.parsers.vasp2w90:Vasp2w90Parser"

[project.entry-points."aiida.workflows"]
"vasp.vasp" = "aiida_vasp.workchains.vasp:VaspWorkChain"
"vasp.verify" = "aiida_vasp.workchains.verify:VerifyWorkChain"
"vasp.converge" = "aiida_vasp.workchains.converge:ConvergeWorkChain"
"vasp.bands" = "aiida_vasp.workchains.bands:BandsWorkChain"
"vasp.master" = "aiida_vasp.workchains.master:MasterWorkChain"
"vasp.relax" = "aiida_vasp.workchains.relax:RelaxWorkChain"
"vasp.neb" = "aiida_vasp.workchains.neb:VaspNEBWorkChain"
"vasp.immigrant" = "aiida_vasp.workchains.immigrant:VaspImmigrantWorkChain"

[project.entry-points."aiida.groups"]
"vasp.potcar" = "aiida_vasp.data.potcar:PotcarGroup"

[project.scripts]
"mock-vasp" = "aiida_vasp.commands.mock_vasp:mock_vasp"
"mock-vasp-strict" = "aiida_vasp.commands.mock_vasp:mock_vasp_strict"

[tool.flit.module]
name = "aiida_vasp"

[tool.pylint.format]
max-line-length = 140

[tool.pylint.messages_control]
disable = [
    "too-many-ancestors",
    "invalid-name",
    "duplicate-code",
    # black compatibility
    "C0330",
    "C0326",
]

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
python_files = "test_*.py example_*.py"
filterwarnings = [
#   "ignore::DeprecationWarning:aiida:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:django:",
    "ignore::DeprecationWarning:yaml:",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source=["aiida_vasp"]

[tool.isort]
# Configuration of [isort](https://isort.readthedocs.io)
line_length = 140
force_sort_within_sections = true
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'AIIDA', 'FIRSTPARTY', 'LOCALFOLDER']
known_aiida = ['aiida']

# Disable tox related setting for now
#[tool.tox]
#legacy_tox_ini = """
#[tox]
#envlist = py38

#[testenv]
#usedevelop=True

#[testenv:py{37,38,39,310}]
#description = Run the test suite against a python version
#extras = testing
#commands = pytest {posargs}

#[testenv:pre-commit]
#description = Run the pre-commit checks
#extras = pre-commit
#commands = pre-commit run {posargs}

#[testenv:docs]
#description = Build the documentation
#extras = docs
#commands = sphinx-build -nW --keep-going -b html {posargs} docs/source docs/build/html
#commands_post = echo "open file://{toxinidir}/docs/build/html/index.html"
#"""
